// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v6.32.0
// source: config/forma.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal.js";

export const protobufPackage = "forma.config";

/** A mapping between a data file and the schema/type to decode it. */
export interface FileMapping {
  /** Path to the binary data file (relative to config location or absolute) */
  data: string;
  /** Path to the .proto schema (relative to config location or absolute) */
  schema: string;
  /** Path to the binary descriptor file (relative to config location or absolute) */
  schemaDescriptor: string;
  /** Fully-qualified Protobuf message type to decode (optional) */
  type: string;
}

/** Workspace-level configuration: multiple mappings supported only. */
export interface Config {
  files: FileMapping[];
}

function createBaseFileMapping(): FileMapping {
  return { data: "", schema: "", schemaDescriptor: "", type: "" };
}

export const FileMapping = {
  encode(message: FileMapping, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.data !== "") {
      writer.uint32(10).string(message.data);
    }
    if (message.schema !== "") {
      writer.uint32(18).string(message.schema);
    }
    if (message.schemaDescriptor !== "") {
      writer.uint32(34).string(message.schemaDescriptor);
    }
    if (message.type !== "") {
      writer.uint32(26).string(message.type);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FileMapping {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFileMapping();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.data = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.schema = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.schemaDescriptor = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.type = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FileMapping {
    return {
      data: isSet(object.data) ? globalThis.String(object.data) : "",
      schema: isSet(object.schema) ? globalThis.String(object.schema) : "",
      schemaDescriptor: isSet(object.schemaDescriptor) ? globalThis.String(object.schemaDescriptor) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
    };
  },

  toJSON(message: FileMapping): unknown {
    const obj: any = {};
    if (message.data !== "") {
      obj.data = message.data;
    }
    if (message.schema !== "") {
      obj.schema = message.schema;
    }
    if (message.schemaDescriptor !== "") {
      obj.schemaDescriptor = message.schemaDescriptor;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FileMapping>, I>>(base?: I): FileMapping {
    return FileMapping.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FileMapping>, I>>(object: I): FileMapping {
    const message = createBaseFileMapping();
    message.data = object.data ?? "";
    message.schema = object.schema ?? "";
    message.schemaDescriptor = object.schemaDescriptor ?? "";
    message.type = object.type ?? "";
    return message;
  },
};

function createBaseConfig(): Config {
  return { files: [] };
}

export const Config = {
  encode(message: Config, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.files) {
      FileMapping.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Config {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.files.push(FileMapping.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Config {
    return {
      files: globalThis.Array.isArray(object?.files) ? object.files.map((e: any) => FileMapping.fromJSON(e)) : [],
    };
  },

  toJSON(message: Config): unknown {
    const obj: any = {};
    if (message.files?.length) {
      obj.files = message.files.map((e) => FileMapping.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Config>, I>>(base?: I): Config {
    return Config.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Config>, I>>(object: I): Config {
    const message = createBaseConfig();
    message.files = object.files?.map((e) => FileMapping.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
