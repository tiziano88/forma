// source: config/forma.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
  (typeof globalThis !== 'undefined' && globalThis) ||
  (typeof window !== 'undefined' && window) ||
  (typeof global !== 'undefined' && global) ||
  (typeof self !== 'undefined' && self) ||
  function () {
    return this;
  }.call(null) ||
  Function('return this')();

goog.exportSymbol('proto.forma.config.Config', null, global);
goog.exportSymbol('proto.forma.config.FileMapping', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forma.config.FileMapping = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forma.config.FileMapping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.forma.config.FileMapping.displayName = 'proto.forma.config.FileMapping';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forma.config.Config = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.forma.config.Config.repeatedFields_,
    null
  );
};
goog.inherits(proto.forma.config.Config, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.forma.config.Config.displayName = 'proto.forma.config.Config';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forma.config.FileMapping.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.forma.config.FileMapping.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forma.config.FileMapping} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forma.config.FileMapping.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        data: jspb.Message.getFieldWithDefault(msg, 1, ''),
        schema: jspb.Message.getFieldWithDefault(msg, 2, ''),
        schemaDescriptor: jspb.Message.getFieldWithDefault(msg, 4, ''),
        type: jspb.Message.getFieldWithDefault(msg, 3, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forma.config.FileMapping}
 */
proto.forma.config.FileMapping.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forma.config.FileMapping();
  return proto.forma.config.FileMapping.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forma.config.FileMapping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forma.config.FileMapping}
 */
proto.forma.config.FileMapping.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setData(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setSchema(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setSchemaDescriptor(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setType(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forma.config.FileMapping.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.forma.config.FileMapping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forma.config.FileMapping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forma.config.FileMapping.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getSchema();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getSchemaDescriptor();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
};

/**
 * optional string data = 1;
 * @return {string}
 */
proto.forma.config.FileMapping.prototype.getData = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.forma.config.FileMapping} returns this
 */
proto.forma.config.FileMapping.prototype.setData = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string schema = 2;
 * @return {string}
 */
proto.forma.config.FileMapping.prototype.getSchema = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.forma.config.FileMapping} returns this
 */
proto.forma.config.FileMapping.prototype.setSchema = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string schema_descriptor = 4;
 * @return {string}
 */
proto.forma.config.FileMapping.prototype.getSchemaDescriptor = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.forma.config.FileMapping} returns this
 */
proto.forma.config.FileMapping.prototype.setSchemaDescriptor = function (
  value
) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional string type = 3;
 * @return {string}
 */
proto.forma.config.FileMapping.prototype.getType = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.forma.config.FileMapping} returns this
 */
proto.forma.config.FileMapping.prototype.setType = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.forma.config.Config.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forma.config.Config.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.forma.config.Config.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forma.config.Config} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forma.config.Config.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        filesList: jspb.Message.toObjectList(
          msg.getFilesList(),
          proto.forma.config.FileMapping.toObject,
          includeInstance
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forma.config.Config}
 */
proto.forma.config.Config.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forma.config.Config();
  return proto.forma.config.Config.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forma.config.Config} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forma.config.Config}
 */
proto.forma.config.Config.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.forma.config.FileMapping();
        reader.readMessage(
          value,
          proto.forma.config.FileMapping.deserializeBinaryFromReader
        );
        msg.addFiles(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forma.config.Config.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.forma.config.Config.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forma.config.Config} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forma.config.Config.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getFilesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.forma.config.FileMapping.serializeBinaryToWriter
    );
  }
};

/**
 * repeated FileMapping files = 1;
 * @return {!Array<!proto.forma.config.FileMapping>}
 */
proto.forma.config.Config.prototype.getFilesList = function () {
  return /** @type{!Array<!proto.forma.config.FileMapping>} */ (
    jspb.Message.getRepeatedWrapperField(
      this,
      proto.forma.config.FileMapping,
      1
    )
  );
};

/**
 * @param {!Array<!proto.forma.config.FileMapping>} value
 * @return {!proto.forma.config.Config} returns this
 */
proto.forma.config.Config.prototype.setFilesList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.forma.config.FileMapping=} opt_value
 * @param {number=} opt_index
 * @return {!proto.forma.config.FileMapping}
 */
proto.forma.config.Config.prototype.addFiles = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.forma.config.FileMapping,
    opt_index
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.forma.config.Config} returns this
 */
proto.forma.config.Config.prototype.clearFilesList = function () {
  return this.setFilesList([]);
};

goog.object.extend(exports, proto.forma.config);
